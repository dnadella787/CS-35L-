Dhanush Nadella
UID: 205150583
TA: Daniel Meirovitch
Section 2

Homework: Learning to use Emacs

Exercise 1.1: Moving around in Emacs
1. emacs exer1.html
2. C-s HTML enter
3. C-s scavenger enter M-b
4. C-s self-referential enter M-b M-b
5. C-s arrow enter M-b
6. C-e
7. C-a
8. I did not use any arrow keys. I feel like I did everything the most optimal way.
9. I didn't use the arrow keys.
10. C-x C-c

Exercise 1.2: Deleting text in Emacs
1. emacs exer2.html
2. M-g M-g 19 C-k C-k
3. C-s del enter C-a C-k
4. C-s <! enter C-a C-u 3 C-k
5. C-s <! enter left left M-z > C-s <! enter C-a C-u C-k C-s <! enter C-a C-k

Exercise 1.3: Inserting text in Emacs
1. emacs exer3.html
2. M-% Assignment 1 enter Assignment 42 y y q
3. M-% UTF-8 enter US-ASCII enter y
4. C-M-s [^[:ascii:]] enter C-a C-k C-k
5. C-s </ol> enter C-o
6. C-x C-s C-x C-c

Exercise 1.4: Other editing tasks in Emacs
1. cat exer2.html exer2.diff > exer4.html
2. emacs exer4.html
   C-s --- C-s enter C-a C-Sp C-s h2> C-s enter C-w
   C-s ins enter C-a C-s C-s h2> C-s enter C-w
   C-s <ul enter C-a C-Sp C-s h2> C-s enter C-w
   C-s sub enter C-a C-Sp C-s ing C-s enter C-w
   C-s > enter M-z >
   C-s sho enter C-a C-sp C-s ml> enter C-w
   M-% -<!-- enter <!-- enter y y y y
   C-s <p> C-a C-d C-n C-d C-n C-d
   M-% + enter Sp enter y y
3. C-s <!-- C-s C-s C-s C-s C-s enter C-a C-Sp C-s --> enter M-w C-r </html> C-y
4. C-s <!-- enter C-a C-Sp C-s --> enter M-w M-g M-g 19 C-y
   C-s <!-- C-s enter C-a C-Sp C-s --> enter M-w C-r submit< C-n C-n C-y
   C-s <!-- C-s C-s enter C-a C-Sp C-s --> enter M-w C-r nothing enter C-y
   C-s <!-- C-s C-s C-s enter C-a C-Sp C-s --> enter M-w C-r nothing enter C-n C-y
5. C-s <!-- C-s enter C-a C-Sp C-s --> C-s C-s C-s C-s C-s enter C-w
6. C-x u
7. M-< C-s <!-- diff enter C-a m-% --> enter enter y y y y
8. M-% <ol> enter <oL> enter ! (7 total instances)
9. diff -u exer1.html exer4.html > exer4.diff cat exer4.diff

Exercise 1.5: Doing commands in Emacs
1. mkdir junk
2. cd junk touch hello.c emacs hello.c 

#include <stdio.h>
int
main(void)
{
  int c = getchar();
  if (c < 0)
    {
      if (ferror (stdin))
        perror ("stdin");
      else
        fprintf (stderr, "EOF on input\n");
      return 1;
    }
  if (putchar (c) < 0 || fclose (stdout) != 0)
    {
      perror("stdout");
      return 1;
    }
  return 0;
}

3. M-x compile ./hello
4. C-x b hello-out enter C-u M-! ./hello
5. M-x append-to-file ~/35LAssignments/Assignment1/key1.txt
EOF on input


Exercise 1.6: Running Elisp code
1. emacs C-x b enter
2. most-positive-fixnum = 2305843009213693951 - 1fffffffffffffff, which is the highest possible integer value i.e. (2^61)-1 to account for information about the integer not all bytes are used, hence not 2^64
   most-negative-fixnum = -2305843009213693952 - 2000000000000000, which is the lowest possible integer value, i.e. -(2^61) to account for information about the integer not all bytes are used, hence not 2^64
   most-positive-fixnum C-j (format "%x" 2305843009213693951) most-negative-fixnum C-j (format "%x" -2305843009213693952)
3. (random "205-150-583) C-j 80766200649093658
4. (setq x(random)) C-j
    -825812855980205664
   (setq y(random)) C-j
    355926880833372806 
5. (setq p(* x y)) C-j
   1127630104574831040
   (setq r(logand p most-positive-fixnum)) C-j
   1127630104574831040
6. r is not equivalent to the actual mathematical product. It is not even the proper signed value, r is negative while the actual value is negative. 
7. The random function must be coded in some way in order for it to be executed. Thus, it cannot be truly random in the mathematical sense. The function either uses some set of rules to determine the outcome or even uses external variables to obtain a seed number to output a "random" number. For example it may use the computer's clock and then perform operations on it to obtain a random number. Regardless, as long as the function is hard coded, it must follow some rules or algorithms and thus cannot be truly random in the mathematical sense.
8. For r to be be the mathematically correct product of x and y in general, we have three possible cases:
   1. actual value == 0
   2. 0 < actual value <= (2^61)-1
   3. 0 > actual value => -(2^61)
In each of these cases, the actual value is small enough that it can be represented within Elisps integer limits (r == actual value). For case 1 (actual value == 0) we have two subcases:
   1. x == 0 and -(2^61) <= y <= (2^61)-1
   2. y==0 and -(2^61) <= x <= (2^61)-1.
In each of these cases, there are [(2^61)-1+(2^61)+1] possibilities. But since this would count the case x==0 && y==0 twice, the total for case 1 would be 2*[(2^61)+(2^61)]-1 = (2^63)-1. Now for case 2 (0 < actual value <= (2^61) -1) we can obtain a lower bound by taking only the following subcases:
   1. 0 < x <= sqrt((2^61)-1) and 0 < y <= sqrt((2^61)-1).
   2. 0 > x >= sqrt((2^61)-1) and 0 > y >= sqrt((2^61)-1).
In each of these subcases, there are (2^61)-1 possible cases by the multiplication rule: (possible cases of x) * (possible cases of y) = sqrt((2^61)-1) * sqrt((2^61)-1) = (2^61)-1. These two subcases net us in total (2^62)-2 possible cases for case 2. For case 3 (0 > actual value => -(2^61)) we can again obtain a lower bound by taking two possible subcases:
   1. 0 < x <= sqrt(2^61) and 0 > y >= -sqrt(2^61)
   2. 0 > x >= -sqrt(2^61) and 0 < y <= sqrt(2^61)
Each of these subcases have (2^61) possible subcases by the multiplication principle : (possible cases of x) * (possible cases of y) = sqrt(2^61) * sqrt(2^61) = (2^61). Because there are two cases there are in total (2^62) possible cases for case 3. We have obtained a lower bound on the total number of cases where the actual value is correctly represented by r but now we also have to calculate the total number of possible actual values. This is easy to do by the multiplication rule again: (possible cases of x) * (possible cases of y) = [(2^61)-1+(2^61)+1] * [(2^61)-1+(2^61)+1] = (2^62) * (2^62) = (2^124). The lower bound on the total number of correct cases (since each case is pairwise disjoint) : case1 + case2 + case3 =
[(2^63)-1] + [(2^62)-2] + [(2^62)] = (2^64)-3. Thus the probability that the r value is equivalent to the proper mathematical product is [((2^64)-3)/(2^124)] ~= 8.67E-19. A very very small number.

**note** we took a lower bound because to actually calculate the total number of possible factors for the actual value would be very hard to count using a combinatorial argument so taking a lower bound must be done. This is why we ignored possibilities such as (2^48) * 2 in case 2.
